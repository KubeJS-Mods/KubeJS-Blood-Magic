buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven { url "https://files.minecraftforge.net/maven" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

apply from: 'https://files.latmod.com/public/markdown-git-changelog.gradle'

def ENV = System.getenv()
version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}"
group = project.mod_package
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	mappings channel: 'snapshot', version: '20201028-1.16.3'
	//accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	runs {
		client {
			workingDirectory project.file('run')
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'
			property 'mixin.env.disableRefMap', 'true'

			if (project.hasProperty('mc_dev_uuid')) args '--uuid', project.mc_dev_uuid
			if (project.hasProperty('mc_dev_username')) args '--username', project.mc_dev_username
			if (project.hasProperty('mc_dev_width')) args '--width', project.mc_dev_width
			if (project.hasProperty('mc_dev_height')) args '--height', project.mc_dev_height

			mods {
				kubejs {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			args 'nogui'

			mods {
				kubejs {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/')

			mods {
				kubejs {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	mavenLocal()
	maven { url = "https://www.cursemaven.com" }
}

dependencies {
	minecraft "net.minecraftforge:forge:${forge_version}"
	compile fg.deobf("curse.maven:rhino-416294:${rhino_file}")
	compile fg.deobf("curse.maven:architectury-forge-419699:${architectury_file}")
	compile fg.deobf("curse.maven:kubejs-forge-238086:${kubejs_file}")
	compile fg.deobf("curse.maven:jei-238222:${jei_file}")
	compile fg.deobf("curse.maven:blood-magic-224791:${blood_magic_file}")
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.archivesBaseName
			artifact(reobfArtifact) {
				classifier null
			}
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "latvian"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id
			releaseType = "release"
			addGameVersion "1.16.2"
			addGameVersion "1.16.3"
			addGameVersion "1.16.4"
			addGameVersion "1.16.5"
			relations {
				requiredDependency 'kubejs-forge'
				requiredDependency 'blood-magic'
			}
			changelog = getGitChangelog
			changelogType = 'markdown'
		}
	}
}